{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Meta","App","Option","react_default","a","createElement","className","icon","type","es_form","style","float","Item","label","input","prefix","color","placeholder","Password","es_button","carousel","autoplay","width","alt","src","card","title","textAlign","Grid","gridStyle","hoverable","cover","gridImgStyle","description","Component","height","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.28a85176.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\n\nimport {\n  Form, Select, Input, Button, Carousel, Card, Icon, Menu\n} from 'antd';\n\nconst { Meta } = Card;\nconst { Option } = Select;\nclass App extends Component {\n\n\n  render() {\n    return (\n      <div className=\"App\">\n<header>\n<h1 ><Icon type=\"rocket\" />ColArt</h1>\n        <h2>Te presentamos las diversas formas de entretenimiento artístico y cultural.</h2>\n        </header>\n       \n\n       \n<sider>\n  \n        <Form  style={{float:'right'}} >\n     \n        <Form.Item label=\"Nombre\">\n\n        <Input prefix={<Icon type=\"user\" style={{ color: 'rgba(0,0,0,.25)' }} />} placeholder=\"Nombre\" />\n</Form.Item>\n<Form.Item label=\"Correo electrónico\">\n<Input prefix={<Icon type=\"user\" style={{ color: 'rgba(0,0,0,.25)' }} />} placeholder=\"Correo\" />\n\n</Form.Item>\n<Form.Item label=\"Contraseña\">\n<Input.Password placeholder=\"Ingresa contraseña\" />\n</Form.Item>\n<Form.Item>\n<Button type=\"primary\" >Sé parte de ColArt!</Button>\n</Form.Item>\n</Form>\n</sider>\n\n\n\n\n<content>\n        <Carousel autoplay style={{width:70}}>\n          <div>\n            <img alt=\"example\" src=\"https://images.pexels.com/photos/358010/pexels-photo-358010.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=650&w=940\" style={{ width: 1180 }}></img>\n          </div>\n          <div>\n          <img alt=\"example\" src=\"https://images.pexels.com/photos/952422/pexels-photo-952422.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=650&w=940\" style={{ width: 1180 }}></img>\n          </div>\n          <div>\n          <img alt=\"example\" src=\"https://images.pexels.com/photos/1405816/pexels-photo-1405816.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=650&w=940\" style={{ width: 1180 }}></img>\n          </div>\n     \n        </Carousel>\n\n        <Card title=\"Artistas destacados  \" style={{textAlign:\"center\"}}>\n          <Card.Grid style={gridStyle}>\n\n            <Card\n              hoverable\n              style={{ width: 240, gridStyle }}\n              cover={<img alt=\"example\" style={gridImgStyle} src=\"https://images.pexels.com/photos/1735240/pexels-photo-1735240.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=650&w=940\" />}\n            >\n              <Meta\n                title=\"Carolina Sierra - Cantante\"\n                description=\"Apasionada por la música. Rock<3\"\n              />\n            </Card>\n          </Card.Grid>\n\n          <Card.Grid style={gridStyle}>\n\n            <Card\n              hoverable\n              style={{ width: 240, gridStyle }}\n              cover={<img alt=\"example\" style={gridImgStyle} src=\"https://images.pexels.com/photos/379962/pexels-photo-379962.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=650&w=940\" />}\n            >\n              <Meta\n                title=\"Juan Agudelo - Guitarrista\"\n                description=\"Me gusta hacer los mejores solos de guitarra. Jazz!!\"\n              />\n            </Card>\n          </Card.Grid>\n\n          <Card.Grid style={gridStyle}>\n\n            <Card\n              hoverable\n              style={{ width: 240, gridStyle }}\n              cover={<img alt=\"example\" style={gridImgStyle} src=\"https://images.pexels.com/photos/1886694/pexels-photo-1886694.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=650&w=940\" />}\n            >\n              <Meta\n                title=\"Juanita Rendón - Bailarina\"\n                description=\"Me encanta la danza de mi tierra.\"\n              />\n            </Card>\n          </Card.Grid>\n          <Card.Grid style={gridStyle}>\n\n            <Card\n              hoverable\n              style={{ width: 240, gridStyle }}\n              cover={<img alt=\"example\" style={gridImgStyle} src=\"https://images.unsplash.com/photo-1549123792-275210fbcef8?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=333&q=80\"/>}\n            >\n              <Meta\n                title=\"Mariana Valencia - Pintora\"\n                description=\"Me gusta el arte grecorromano.\"\n              />\n            </Card>\n          </Card.Grid>\n\n\n        </Card>\n\n        </content>\n\n\n      </div>\n    );\n  }\n}\n\nconst gridImgStyle = {\n\n  height: 300,\n  textAlign: 'center'\n};\nconst gridStyle = {\n  width: '25%',\n  textAlign: 'center',\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}